# day 8
'''
class Person(object):

    def __init__(self, name, age):
        self._name = name
        self._age = age

    # 访问器 - getter方法
    @property
    def name(self):
        return self._name

    # 访问器 - getter方法
    @property
    def age(self):
        return self._age

    # 修改器 - setter方法
    @age.setter
    def age(self, age):
        self._age = age

    def play(self):
        if self._age <= 16:
            print('%s正在玩飞行棋.' % self._name)
        else:
            print('%s正在玩斗地主.' % self._name)


def main():
    person = Person('王大锤', 12)
    person.play()
    person.age = 22
    person.play()
    # person.name = '白元芳'  # AttributeError: can't set attribute


if __name__ == '__main__':
    main()
'''
'''
class Person(object):

    # 限定Person对象只能绑定_name, _age和_gender属性
    __slots__ = ('_name', '_age', '_gender')

    def __init__(self, name, age):
        self._name = name
        self._age = age

    @property
    def name(self):
        return self._name

    @property
    def age(self):
        return self._age

    @age.setter
    def age(self, age):
        self._age = age

    def play(self):
        if self._age <= 16:
            print('%s正在玩飞行棋.' % self._name)
        else:
            print('%s正在玩斗地主.' % self._name)


def main():
    person = Person('王大锤', 22)
    person.play()
    person._gender = '男'
    # AttributeError: 'Person' object has no attribute '_is_gay'
    # person._is_gay = True
if __name__=='__main__':
    main()
'''
'''
from math import sqrt


class Triangle(object):

    def __init__(self, a, b, c):
        self._a = a
        self._b = b
        self._c = c

    @staticmethod
    def is_valid(a, b, c):
        return a + b > c and b + c > a and a + c > b

    def perimeter(self):
        return self._a + self._b + self._c

    def area(self):
        half = self.perimeter() / 2
        return sqrt(half * (half - self._a) *
                    (half - self._b) * (half - self._c))


def main():
    a, b, c = 3, 4, 5
    # 静态方法和类方法都是通过给类发消息来调用的
    if Triangle.is_valid(a, b, c):
        t = Triangle(a, b, c)
        print(t.perimeter())
        # 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数
        # print(Triangle.perimeter(t))
        print(t.area())
        # print(Triangle.area(t))
    else:
        print('无法构成三角形.')


if __name__ == '__main__':
    main()
'''
'''
class Person(object):
    """人"""

    def __init__(self, name, age):
        self._name = name
        self._age = age

    @property
    def name(self):
        return self._name

    @property
    def age(self):
        return self._age

    @age.setter
    def age(self, age):
        self._age = age

    def play(self):
        print('%s正在愉快的玩耍.' % self._name)

    def watch_av(self):
        if self._age >= 18:
            print('%s正在观看爱情动作片.' % self._name)
        else:
            print('%s只能观看《熊出没》.' % self._name)


class Student(Person):
    """学生"""

    def __init__(self, name, age, grade):
        super().__init__(name, age)
        self._grade = grade

    @property
    def grade(self):
        return self._grade

    @grade.setter
    def grade(self, grade):
        self._grade = grade

    def study(self, course):
        print('%s的%s正在学习%s.' % (self._grade, self._name, course))


class Teacher(Person):
    """老师"""

    def __init__(self, name, age, title):
        super().__init__(name, age)
        self._title = title

    @property
    def title(self):
        return self._title

    @title.setter
    def title(self, title):
        self._title = title

    def teach(self, course):
        print('%s%s正在讲%s.' % (self._name, self._title, course))


def main():
    stu = Student('王大锤', 15, '初三')
    stu.study('数学')
    stu.watch_av()
    t = Teacher('骆昊', 38, '砖家')
    t.teach('Python程序设计')
    t.watch_av()


if __name__ == '__main__':
    main()
'''
'''
from abc import ABCMeta, abstractmethod


class Pet(object, metaclass=ABCMeta):
    """宠物"""

    def __init__(self, nickname):
        self._nickname = nickname

    @abstractmethod
    def make_voice(self):
        """发出声音"""
        pass


class Dog(Pet):
    """狗"""

    def make_voice(self):
        print('%s: 汪汪汪...' % self._nickname)


class Cat(Pet):
    """猫"""

    def make_voice(self):
        print('%s: 喵...喵...' % self._nickname)


def main():
    pets = [Dog('旺财'), Cat('凯蒂'), Dog('大黄')]
    for pet in pets:
        pet.make_voice()


if __name__ == '__main__':
    main()
'''
'''
# 编写代码进行工资结算
from abc import ABCMeta, abstractmethod

class employ(object,metaclass=ABCMeta):
    def __init__(self,name):
        self._name=name
    @property
    #这里主要是设置访问器
    def name(self):
        return self._name
    @abstractmethod
    #这里因为下面的代码没法实例化
    def get_gongzi(self):
        pass

class jingli(employ):
    def get_gongzi(self):
        return 15000

class chengxu(employ):
    def __init__(self,name,workinghour=0):
        super().__init__(name)
        self._workinghour=workinghour
    @property
    def workinghour(self):
        return self._workinghou
    @workinghour.setter
    def workinghour(self,workinghour):
        self._workinghour=workinghour if workinghour>0 else 0
    def get_gongzi(self):
        return 150 * self._workinghour
    
class xiaoshou(employ):
    def __init__(self,name,sale=0):
        super().__init__(name)
        self._sale=sale
    @property
    def sale(self):
        return self._sale
    @sale.setter
    def sale(self,sale):
         self._sale=sale if sale>0 else 0
    def get_gongzi(self):
        return 1500+0.15*self._sale

def main():
    emp1=jingli('尹运文')
    print(emp1.get_gongzi())
    emp2=chengxu('后秋毫',300)
    print(emp2.get_gongzi())
    emp3=xiaoshou('哥哥',10000)
    print(emp3.get_gongzi())
if __name__=='__main__':
    main()
'''
#编写一个代码用来求长方形

from abc import ABCMeta, abstractmethod

class rec(object,metaclass=ABCMeta):
    def __init__(self,x,y):
        self._x=x
        self._y=y
    @property
    def x(self):
        return self._x
    @property
    def y(self):
        return self._y
    @x.setter
    def x(self,x):
        self._x=x if x>0 else 0
    @y.setter
    def y(self,y):
        self._y=y if y>0 else 0
    @abstractmethod
    def shiyong(self):
        pass
    
class zhouchang(rec):

    def shiyong(self):
        return 2*(self._x+self._y)
class mianji(rec):
    def shiyong(self):
        return self._x*self._y
def main():
    zc=zhouchang(2,3)
    print(zc.shiyong())
    mj=mianji(2,3)
    print(mj.shiyong())
if __name__=='__main__':
    main()
    
